[
  {
    "id": 0,
    "title": "Artist Website",
    "subtitle": "Web Application built for Italian tenor Omar Mancini as his personal business card for the artistic directors who he works with.",
    "description": "This project was realized for a customer, who was looking around for a custom website able to publicize his professional/artistic figure & biggest passion. The SPA hosts 3 different pages such as the homepage, where visitors can understand and get to know the figure described; the about-me page, where the figure of the customer is in-depth described along his professional career; and the gallery where it's possible to see different shots of the artist while acting or posing. This project has been realized mainly with React JS, Bootstrap, and styled with Saas. Other third parties library that can be found in the project are: Email JS, React-Router, Date-fns, React-toastify & Swiper JS."
  },
  {
    "id": 1,
    "title": "Web3 CV Viewer",
    "subtitle": "Simple Web Application built to publicize my own CV and professional figure, while moving my firsts steps into web3 web development",
    "description": "This project was born to publicize and share my professional figure as a Junior Web Developer after fulfilling the six-month intensive boot camp of Epicode. In addition to that, I also wanted to move my first steps into Web3 Web Development, just for curiosity. The Web Application it's a SPA that provides visitors with 3 different routes, but one of these, it's available only after the visitor has logged in with his MetaMask wallet (popular web3 crypto-wallet). The homepage provides visitors a sort of guide to navigating around the application, while the my-resume page shows them my professional figure with a full Curriculum Vitae about me. Finally, after the login procedure, it is possible to accede to the private area, where visitors can see their wallet address, balance, and the id of the chain that they are connected to. Here they can also manipulate (add, modify, delete) data from my CV. This feature is provided to simulate the calls to an external API but it's working through the Session Storage of the browser. Session Storage resulted handy for this kind of feature because allows me to let visitors experiment and manipulate data from my CV in a non-permanent way. The project has been realized in React JS with TypeScript, using Bootstrap framework, and styled with Sass. Other third parties additional libraries used in the project are: React-Router, Framer Motion, Email JS, and Metamask. "
  },
  {
    "id": 2,
    "title": "My Weather App",
    "subtitle": "Custom Weather App built in React JS using the Open Weather API for weather informations and predictions",
    "description": "This Web Application is one of the first projects I've realized on my own. It's a simple Web App that provides visitors with weather predictions based on the chosen location. The project it's a SPA Application that has been realized in React and JavaScript, Bootstrap, and styled with Sass. The project relies completely on the free version of Open Weather API, from the location picker, that returns the geographical coordinates of the selected place, to the actual weather predictions. The main features of this application are: Reading the weather predictions of the selected location for the next 24 hours or for the entire week ahead. It also provides the possibility of seeing charts related to the temperatures, the humidity, and the wind flow."
  },
  {
    "id": 3,
    "title": "Cinema Capstone",
    "subtitle": "Full-Stack Web Application built as Capstone Project of my, completed, Epicode Web Developer Bootcamp to reproduce a Cinema or Theather web application",
    "description": "This project's the Capstone Project I realized after completing the six-month intensive boot camp of Epicode as Junior Web Developer. In this project, I've tried to create a Web Application for Theaters and Cinemas that will help those businesses to sell their products (such as show tickets) and loyalize their customers. This is a Full-Stack Web Application that relies on a REST API realized in Java Spring and a PostgreSQL relational database. The Front end side of the application has been realized in React TypeScript, Redux, and Bootstrap and styled with Sass. It consists of a Single Page Application with different routes (ex. /homepage, /movie-page, /checkout-page, /result-page...) that allows visitors to learn more about specific films, register themself on the platform, buy tickets for shows and store their tickets for entering to the shows.The process of purchasing a ticket requires the user to log in with his account, select one of the three different films in ongoing projections, select the desired seats if available, and then proceed with the checkout through payment with Stripe."
  }
]
